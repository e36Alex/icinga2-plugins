#! /usr/bin/python3

import requests
import urllib3
urllib3.disable_warnings()
import argparse
import sys

# Global variables

DESCRIPTION = """Returns the state of OpenHab things."""
STATE_UNKNOWN = """ State unkown, check input parameters."""


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '--url',
        help='URL of OpenHab instance, for example openhab.domain.com',
        dest='URL',
        required=True,
    )

    parser.add_argument(
        '--port',
        help='Port of OpenHab instance, for example is 8843',
        dest='PORT',
        required=True,
    )

    parser.add_argument(
        '--token',
        help='Token for OpenHab auth, generated by openhab.',
        dest='TOKEN',
        required=True,
    )

    parser.add_argument(
        '--uid',
        help='UID of the thing, that should be checked.',
        dest='UID',
        required=True,
    )

    return parser.parse_args()


# parse the command line, exit with UNKNOWN if it fails
try:
    args = parse_args()
except SystemExit:
    sys.exit(STATE_UNKNOWN)


#Request Variables

url = '{}'.format(args.URL)
port = '{}'.format(args.PORT)
access_token = '{}'.format(args.TOKEN)
uid = '{}'.format(args.UID)
headers = {'accept':'*/*','content-type':'application/json','Authorization': 'Bearer {}'.format(access_token)}
things_req = requests.get('https://'+url+':'+port+'/rest/things/'+uid+'/status', headers=headers, verify=False)

if (things_req.json()["status"]) == "ONLINE":
    print("OK - Thing is online.")
    exit(0)
elif (things_req.json()["status"]) == "INITIALIZING":
    print("WARNING - Something is wrong. Trying to initialize Thing.")
    exit(1)
elif (things_req.json()["status"]) == "OFFLINE":
    print("CRITICAL - Thing is offline")
    exit(2)
else:
    print(f"UNKNOWN - value of  checkFunction is {(things_req.json())}")
    exit(3)
